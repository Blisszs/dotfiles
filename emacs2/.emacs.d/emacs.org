#+SEQ_TODO: REMOVE(r) TODO(t) IMPROVING(i) | DONE(d) CANCELLED(c)
Welcome to my emacs config. Always improving trying to improve it. I think.

* startup speed tweaks
  mainly borrowed from doom emacs.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.6)

(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1)))
#+END_SRC
* package manager bootstrap
  Since I don't have the straight package installed for the first time, this allows emacs to install it without any manual intervention.
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+END_SRC
* Cosmetics
** interface
  Remove unused bars, highlight matching parentheses, word warping instead of being cut, and load my theme theme of choice.

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :straight t
    :config (load-theme 'base16-classic-dark t))
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-visual-line-mode 1)
  (show-paren-mode 1)
  ;; line numbers
  (add-hook 'text-mode-hook 'linum-mode)
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

** font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "terminus-11")
#+END_SRC
** startup dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-items '((recents . 5)
		      (bookmarks . 5)))
    (dashboard-center-content t))

(set-fontset-font "fontset-default"
                  (cons page-break-lines-char page-break-lines-char)
                  (face-attribute 'default :family))
#+END_SRC
* exwm
#+BEGIN_SRC emacs-lisp
;(load-file ~.emacs.d/exwm.el)
#+END_SRC
* Bakcup Settings
  save bakcup files to a directory instead of the current working directory so that it stays organized.

#+BEGIN_SRC emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
  '(("." . "~/.cache/emacs-backups/"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
#+END_SRC
* Text Modifing Tools
** matching parenthese
   automaticly create a matching parentheses.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
** multiple cursors
   edit multiple line at the same time.
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :straight t)
#+END_SRC
** snippets
*** yasnippet
    snippets for emacs.
 #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :straight t
     :hook (lsp-mode . yas-minor-mode))

   (use-package yasnippet-snippets
;     :straight (yasnippet-snippets :type git :host github :repo "AndreaCrotti/yasnippet-snippets"))
     :straight t)
 #+END_SRC
** agressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :straight t
    :hook
    ((emacs-lisp-mode ) . aggressive-indent-mode))
#+END_SRC
** expand region
    mark words or within delimiters with less keystrokes.
 #+BEGIN_SRC emacs-lisp
 (use-package expand-region
 :straight t
 :bind ("C-c e" . er/expand-region))
 #+END_SRC
* Movement Around Text and Windows
** emacs keybinds
Moves the point to the newly created window after splitting.

#+BEGIN_SRC emacs-lisp
  ;; automaticly switch to new windows on splits
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))

  ;; switch to previous buffer
  (defun er-switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
** avy
   Avy allows for the cursor to jump around characters on the screen to the point that you can also change buffers with it.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :bind
    ("C-c <SPC>" . avy-goto-word-1)
    )
#+END_SRC
** winner mode
   winner mode allow to undo and redo changes to window layouts
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** projectile
   basic configuration for now. Planning to improve it soon

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :config
     (setq projectile-completion-system 'ivy)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (setq projectile-project-search-path '("~" "~/projects"))
     (projectile-mode 1)
     )
#+END_SRC
* Minibuffer Completion Tools
** ivy
  light completion framework for emacs.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight t
    :bind
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view)
    :custom
    (ivy-use-virtual-buffers t)
    :init
    (ivy-mode 1))
#+END_SRC
** counsel
   enforce the use of ivy.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight t
    :after ivy
    :bind
    ("C-c f" .  counsel-fzf)
    :config
    (counsel-mode 1))
#+END_SRC 
** swiper
   isearch alternative that shows a preview of all the searches
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :straight t
    :bind
    ("C-s" . swiper-isearch)
    )
#+END_SRC
* Git
** magit
   the best git frontend. ever.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :bind ("C-c g" . magit))
#+END_SRC
* Programming
** language server
   an emacs client for the language server protocol. Currently using lsp mode due to a bug in eglot.

#+BEGIN_SRC emacs-lisp
 (use-package lsp-mode
   :straight t
   :hook ((c++-mode c-mode) . lsp)
   :config
   (setq lsp-prefer-capf t)
   (setq vc-follow-symlinks t)
   (setq gc-cons-threshold 100000000))
#+END_SRC
** Syntax Checker
   the built-in emacs syntax checker - flymake.
 #+BEGIN_SRC emacs-lisp
 (use-package flymake
   :hook (lsp-mode . flymake-mode))
 #+END_SRC
** Completion Framework
   Modular completion framework.
 #+BEGIN_SRC emacs-lisp
 (use-package company
   :straight t
   :bind (:map company-active-map
	       ("<tab>" . company-complete-selection)
	       ("C-n" . company-select-next)
	       ("C-p" . company-select-previous))
 ;;  :hook (lsp-mode . company-mode)
   :custom
   (company-backends '(company-capf))
   :init
   (setq company-idle-delay 0)
   (setq company-minimum-prefix-length 2)
   (setq company-require-match 'never))
 #+END_SRC
* Dired
** misc dired settings
   hide dired details automaticly

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :hook
    (dired-mode . dired-hide-details-mode)
    :bind (:map dired-mode-map
    ("." . hydra-dired/body))
    )
#+END_SRC
* Hydras
  Use multiple related commands with a common prefix.
** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :straight t)
#+END_SRC
** multiple cursors hydra
   An hydra for multiple cursors commands.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c")
		(defhydra cqql-multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Miscellaneous^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("q" nil)))
#+END_SRC
** dired hydra
   A dired hydra. Mainly for cases when I forget the keybinds.
#+BEGIN_SRC emacs-lisp
(defhydra hydra-dired (:hint nil :color red)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))
#+END_SRC
** emms hydra
#+BEGIN_SRC emacs-lisp
  (defhydra bliss/emms-hydra (:hint nil)
    "
    _+_ raise volume  _-_ lower volume  _s_ stop     _SPC_ pause
    _n_ next          _p_ previous      _f_ forward  _b_ backward
    _q_ quit
    "
    ("+" emms-volume-raise)
    ("-" emms-volume-lower)
    ("s" emms-stop)
    ("SPC" emms-pause)
    ("n" emms-next)
    ("p" emms-previous)
    ("f" emms-seek-forward)
    ("b" emms-seek-backward)
    ("q" nil)
    )
#+END_SRC
* org
** org-mode
 Mainly org-mode variables for now.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t) ;; native indentation inside org-mode blocks
(add-to-list 'org-modules 'org-habit)
#+END_SRC
** org-capture
    Org-capture allows to add entries to a file from anywhere in emacs. Due to this it's very convinient to have it just in case I need to quickly write notes or schedule activities.
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :config 
    (setq org-capture-templates 
	  '(("t" "tasks" entry (file+headline "~/Sync/org/agenda/life.org" "Todo") "* TODO %?\n  %i\n") ;; Creates a TODO headline in the entry "Todo". If there is a marked region, it will be copied over.
	  
	    ("a" "activity")
	    ("as" "scheduled" entry (file+headline "~/Sync/org/agenda/life.org" "Scheduled") "* TODO %?\n SCHEDULED: %^T \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	    ("ad" "deadline" entry (file+headline "~/Sync/org/agenda/life.org" "Deadline") "* TODO %?\n DEADLINE: %^T \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	    ("al" "learn" entry (file+headline "~/Sync/org/agenda/life.org" "Learn") "* LEARN %? [/] \n - [ ] ")
	    ("ar" "routine" entry (file+headline "~/Sync/org/agenda/life.org" "Routine") "* REPEAT %? \n  SCHEDULED: %^t \n:PROPERTIES:\n:STYLE: habit\n:END: ")
	  
	    ("i" "ideas and thoughts")
	    ("ij" " journal" entry (file+headline "~/Sync/org/journal.org" "journal") "* %T %? \n")
	    ("ii" "idea" entry (file+headline "~/Sync/org/agenda/ideas.org" "idea") "* IDEA %?")
	  
	    ("c" "contacts")
	    ("cf" "family contacts" entry (file+headline "~/Sync/org/contacts.org" "family") "* %^{} \n :properties: \n :telefone: %? \n :email: \n :end: \n")
	    ("cw" "work/school contacts" entry (file+headline "~/Sync/org/contacts.org" "work/school") "* %^{} \n :properties: \n :telefone: %? \n :email: \n :end:\n")
	  
	    ("b" "book and manga")
	    ("bb" "book" entry (file+headline "~/Sync/org/lists/book-list.org" "book") "* %^{PROMPT|READING|READ|COMPLETED|DROPPED} %? \n :properties: \n :author: \n :release_date: \n :page_count: \n :chapters_count: \n :end: \n")
	    ("bm" "manga" entry (file+headline "~/Sync/org/lists/book-list.org" "manga") "* %^{PROMPT|READING|READ|COMPLETED|DROPPED} %? \n :properties: \n :author: \n :release_date: \n :page_count: \n :chapters_count: \n :end: \n")
	  
	    ("v" "television, movies and anime")
	    ("vs" "television series" entry (file+headline "~/Sync/org/lists/tv-list.org" "series") "* %^{PROMPT|PLAN_TO_WATCH|WATCHING|COMPLETED|DROPPED} %? \n :PROPERTIES: \n :DIRECTOR: \n :RELEASE_DATE: \n :EPISODE_COUNT: \n :END: \n")
	    ("va" "anime" entry (file+headline "~/Sync/org/lists/tv-list.org" "anime") "* %^{PROMPT|PLAN_TO_WATCH|WATCHING|COMPLETED|DROPPED} %? \n :PROPERTIES: \n :DIRECTOR: \n :RELEASE_DATE: \n :EPISODE_COUNT: \n :END: \n")
	    ("vm" "movie" entry (file+headline "~/Sync/org/lists/tv-list.org" "movies") "* %^{PROMPT|PLAN_TO_WATCH|WATCHING|COMPLETED|DROPPED} %? \n :PROPERTIES: \n :DIRECTOR: \n :RELEASE_DATE: \n :DURATION: \n :END: \n")
	  
	    ("d" "duvidas" entry (file+headline "~/Sync/org/agenda/life.org" "duvidas") "* TODO %?")
	    ))
    :bind ("C-c o c" . counsel-org-capture))
#+END_SRC
** org-agenda
   Org-mode agenda allows to see all the headers of the org files inside a given directory. It's pretty good in conjunction with org-capture to quickly take notes or store ideas.
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :custom
    (org-agenda-files '("~/Sync/org/agenda"))
    :bind
    ("C-c o a" . org-agenda))
#+END_SRC
** org-bullets
   Show org-mode bullets as UTF-8 characters. 
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC
* multimedia
** emms
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :straight (emms :type git :host github :repo "emacsmirror/emms")
    :custom
    (emms-source-file-default-directory  "~/Music")
    (emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
    ;; Cover thumbnails.
    (emms-browser-covers 'emms-browser-cache-thumbnail)
    :config
    (emms-all)
    (emms-history-load)
    (require 'emms-setup)
    (require 'emms-info)
    (require 'emms-player-mpv)
    (require 'emms-info-tinytag)
    (setq emms-player-list (list emms-player-mpv))
    (setq emms-info-functions '(emms-info-tinytag))
    (add-to-list 'emms-player-mpv-parameters "--volume=35")
    :bind
    ("<f7>" . emms-smart-browse)
    ("C-c m" . bliss/emms-hydra/body)
    )
#+END_SRC
** elfeed 
   Elfeed - a simple rss feed to keep track of youtube videos and news.
 #+BEGIN_SRC emacs-lisp
      (use-package elfeed
	:straight t
	:custom (elfeed-feeds '(
				("https://lukesmith.xyz/rss.xml"                                                luke text)
				("https://notrelated.xyz/rss"                                                   luke text podcast)
				("https://lukesmith.xyz/youtube.xml"                                            luke yt youtube)
				("https://suckless.org/atom.xml"                                                suckless)
				("https://voidlinux.org/atom.xml"                                               void linux)
				("https://guix.gnu.org/feeds/blog.atom"                                         guix linux)
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCimiUgDLbi6P17BdaCZpVbg" youtube yt) ;; exurbia
				("https://www.youtube.com/feeds/videos.xml?channel_id=UC8Q7XEy86Q7T-3kNpNjYgwA" youtube yt) ;; Internet Historian Incognito
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCR1D15p_vdP3HkrH8wgjQRw" youtube yt) ;; Internet Historian
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCRcgy6GzDeccI7dkbbBna3Q" youtube yt) ;; Lemmino
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCsXVk37bltHxD1rDPwtNM8Q" youtube yt) ;; Kurzgesast
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCeeFfhMcJa1kjtfZAGskOCA" youtube yt) ;; Techlinked
				;;				 ("https://www.youtube.com/feeds/videos.xml?channel_id=") ;; template

				))

	:bind
	("C-c r" . elfeed)
	(:map elfeed-search-mode-map
	("g" . elfeed-update)
	("v" . elfeed-play-with-mpv))

	:config
	(setq elfeed-use-curl t)
	(setq elfeed-curl-max-connections 10)
	(setq elfeed-db-directory "~/.cache/elfeed")
	(setq elfeed-search-filter "@6-months-ago")


(defun elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry)))))
 #+END_SRC
* help tools
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :straight t
      :config
      (which-key-mode t)
      (setq which-key-idle-delay 1.0))
#+END_SRC
* pdf
  pdf-tools is a better pdf viewer than the emacs built-in one. Although it's not my preferred way of visualizing pdf, having it inside emacs allows for a quick view a pdf without leaving the comfort of emacs.
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :defer t
    :hook (doc-view-mode . pdf-tools-install))
#+END_SRC
* irc
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :straight t
    :custom
    (erc-nick "blisszs")
    :config
  (defun start-irc ()
   "Connect to IRC."
   (interactive)
   (erc-tls :server "irc.freenode.net" :port 6697
	:nick "blisszs" :full-name "blisszs"))
    )
#+END_SRC
* writting
** Latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :straight auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil)
    ;; preview latex pdf with pdf-tools
    (TeX-view-program-selection '((output-pdf "pdf-tools"))
				TeX-source-correlate-start-server t)
    (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
    (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    :hook (LaTeX-mode . (lambda ()
			  (turn-on-reftex)
			  (setq reftex-plug-into-AUCTeX t)
			  (reftex-isearch-minor-mode)
			  (setq TeX-PDF-mode t)
;			  (auto-fill-mode t)
;			  (setq fill-column 100)
			  (setq TeX-source-correlate-method 'synctex)
			  (setq TeX-source-correlate-start-server t)))
    :config
    (when (version< emacs-version "26")
      (add-hook LaTeX-mode-hook #'display-line-numbers-mode))
    )
#+END_SRC
** TODO org-mode
   org-export maybe
#+BEGIN_SRC emacs-lisp
(setq org-latex-create-formula-image-program 'imagemagick) ;; create latex fragment
#+END_SRC
** TODO spell checker
#+BEGIN_SRC emacs-lisp
  (use-package flyspell)
  (use-package ispell)
#+END_SRC
