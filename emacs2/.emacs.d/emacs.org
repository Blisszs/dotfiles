#+SEQ_TODO: TODO(t) IMPROVING(i) | DONE(d) CANCELLED(c)
Welcome to my emacs config. Always improving trying to improve it. I think.

* Cosmetics
** interface
  Remove unused bars, highlight matching parentheses, word warping instead of being cut, and load my theme theme of choice.

#+BEGIN_SRC emacs-lisp
(use-package jazz-theme
  :ensure t
  :config (load-theme 'jazz t))
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-visual-line-mode 1)
(show-paren-mode 1)
;; line numbers
(add-hook 'text-mode-hook 'linum-mode)
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

** font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "terminus-12")
#+END_SRC
** startup dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-items '((recents . 5)
		      (bookmarks . 5)))
    (dashboard-center-content t))

(set-fontset-font "fontset-default"
                  (cons page-break-lines-char page-break-lines-char)
                  (face-attribute 'default :family))
#+END_SRC
* Bakcup Settings
  save bakcup files to a directory instead of the current working directory so that it stays organized.

#+BEGIN_SRC emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
  '(("." . "~/.cache/emacs-backups/"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
#+END_SRC

* Text Modifing Tools
** matching parenthese
   automaticly create a matching parentheses.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
** multiple cursors
   edit multiple line at the same time.
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+END_SRC
** yasnippet
   snippets for emacs.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :hook (lsp-mode . yas-minor-mode))
#+END_SRC
* Movement Around Text and Windows
** ace jump mode
   jump around text.

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC
** split window
Moves the point to the newly created window after splitting.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC
** expand region
   mark words or within delimiters with less keystrokes.
#+BEGIN_SRC emacs-lisp
(use-package expand-region
:ensure t
:bind ("C-c e" . er/expand-region))
#+END_SRC
** winner mode
   winner mode allow to undo and redo changes to window layouts
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** IMPROVING projectile
   basic configuration for now. Planning to improve it soon

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
     (setq projectile-completion-system 'ivy)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (setq projectile-project-search-path '("~" "~/projects"))
     (projectile-mode 1)
     )
#+END_SRC
* Minibuffer Completion Tools
** ivy
  light completion framework for emacs.
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))
#+END_SRC

** counsel
   ivy utilities.
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config
  (counsel-mode 1))
#+END_SRC 
* Git
** magit
   the best git frontend. ever.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c g" . magit))
#+END_SRC
* Syntax Checker
  on-the-fly syntax checker.
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :hook (lsp-mode . flycheck-mode))
#+END_SRC
* Completion Framework
  Modular completion framework.
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :bind (:map company-active-map
	      ("<tab>" . company-complete-selection)
	      ("C-n" . company-select-next)
	      ("C-p" . company-select-previous))
  :hook (lsp-mode . company-mode)
  :custom
  (company-backends '(company-capf))
  :init
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 2)
  (setq company-require-match 'never))
#+END_SRC
* Programming
** language server
   an emacs client for the language server protocol. Currently using lsp mode due to a bug in eglot.

#+BEGIN_SRC emacs-lisp
 (use-package lsp-mode
   :ensure t
   :hook ((c++-mode c-mode) . lsp)
   :config
   (setq lsp-prefer-capf t)
   (setq vc-follow-symlinks t)
   (setq gc-cons-threshold 100000000))
#+END_SRC
* Hydras
  Use multiple related commands with a common prefix.
** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t)
#+END_SRC
** multiple cursors hydra
   An hydra for multiple cursors commands.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c")
		(defhydra cqql-multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Miscellaneous^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("q" nil)))
#+END_SRC
** dired hydra
   A dired hydra. Mainly for cases when I forget the keybinds.
#+BEGIN_SRC emacs-lisp
(defhydra hydra-dired (:hint nil :color red)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))

(define-key dired-mode-map "." 'hydra-dired/body)
#+END_SRC
* Music
** mpd frontend
   simple fronted for mpd that uses mpc commands for easy manipulation.

#+BEGIN_SRC emacs-lisp
(use-package simple-mpc
  :ensure t
  :bind ("C-c m" . simple-mpc)
  :config
  (setenv "MPD_HOST" "127.0.0.1")
  (setenv "MPD_PORT" "6601"))
#+END_SRC
* Dired
** misc dired settings
hide dired details automaticly

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
* org
** org-mode
 Mainly org-mode variables for now.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t) ;; native indentation inside org-mode blocks
#+END_SRC
** org-capture
    Org-capture allows to add entries to a file from anywhere in emacs. Due to this it's very convinient to have it just in case I need to quickly write notes or schedule activities.
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :config 
    (setq org-capture-templates 
	  '(("t" "tasks" entry (file+headline "~/org/life.org" "Todo") "* TODO %?\n  %i\n") ;; Creates a TODO headline in the entry "Todo". If there is a marked region, it will be copied over.

	    ("a" "activity")
	    ("as" "scheduled" entry (file+headline "~/org/life.org" "Scheduled") "* %?\n SCHEDULED: %^T \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	    ("ad" "deadline" entry (file+headline "~/org/life.org" "Deadline") "* %?\n DEADLINE: %^T \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.

	    ("i" "ideas and thoughts")
	    ("ij" " journal" entry (file+headline "~/org/ideas.org" "journal") "* %T %? \n")
	    ("ii" "idea" entry (file+headline "~/org/ideas.org" "idea") "* %? \n")

	    ("c" "contacts")
	    ("cf" "family contacts" entry (file+headline "~/org/contacts.org" "family") "* %^{} \n :properties: \n :telefone: %? \n :email: \n :end: \n")
	    ("cw" "work/school contacts" entry (file+headline "~/org/contacts.org" "work/school") "* %^{} \n :properties: \n :telefone: %? \n :email: \n :end:\n")

	    ("b" "book and manga")
	    ("bb" "book" entry (file+headline "~/org/book-list.org" "book") "* %? \n :properties: \n :author: \n :release_date: \n :page_count: \n :chapters_count: \n :end: \n")
	    ("bm" "manga" entry (file+headline "~/org/book-list.org" "manga") "* %? \n :properties: \n :author: \n :release_date: \n :page_count: \n :chapters_count: \n :end: \n")

	    ("v" "television, movies and anime")
	    ("vs" "television series" entry (file+headline "~/org/tv-list.org" "series") "* %? \n :PROPERTIES: \n :DIRECTOR: \n :RELEASE_DATE: \n :EPISODE_COUNT: \n :END: \n")
	    ("va" "anime" entry (file+headline "~/org/tv-list.org" "anime") "* %? \n :PROPERTIES: \n :DIRECTOR: \n :RELEASE_DATE: \n :EPISODE_COUNT: \n :END: \n")
	    ("vm" "movie" entry (file+headline "~/org/tv-list.org" "movies") "* %? \n :PROPERTIES: \n :DIRECTOR: \n :RELEASE_DATE: \n :DURATION: \n :END: \n")
	    ))
    :bind ("C-c o c" . org-capture))
#+END_SRC
* rss
  Elfeed - a simple rss feed to keep track of youtube videos and news.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :custom (elfeed-feeds '(
			    ("https://lukesmith.xyz/rss.xml"                                                luke text)
			    ("https://notrelated.xyz/rss"                                                   luke text podcast)
			    ("https://lukesmith.xyz/youtube.xml"                                            luke yt youtube)
			    ("https://suckless.org/atom.xml"                                                suckless)
			    ("https://voidlinux.org/atom.xml"                                               void linux)
			    ("https://guix.gnu.org/feeds/blog.atom"                                         guix linux)
			    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCimiUgDLbi6P17BdaCZpVbg" youtube yt) ;; exurbia
			    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC8Q7XEy86Q7T-3kNpNjYgwA" youtube yt) ;; Internet Historian Incognito
			    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR1D15p_vdP3HkrH8wgjQRw" youtube yt) ;; Internet Historian
			    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRcgy6GzDeccI7dkbbBna3Q" youtube yt) ;; Lemmino
			    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsXVk37bltHxD1rDPwtNM8Q" youtube yt) ;; Kurzgesast
			    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCeeFfhMcJa1kjtfZAGskOCA" youtube yt) ;; Techlinked
			    ;;				 ("https://www.youtube.com/feeds/videos.xml?channel_id=") ;; template

			    ))
    (elfeed-db-directory "~/.cache/elfeed")
    (elfeed-search-filter "@6-months-ago")
    :bind ("C-c r" . elfeed)
    :hook (elfeed-search-mode . elfeed-update)
    :config

    ;; play highlighted link in mpv
    (defun ga/play-with-mpv (start end)
      "Play the link in the region with mpv"
      (interactive "r")
      (shell-command (concat "mpv " "'" (buffer-substring start end)"'" "\&")))

    (define-key elfeed-show-mode-map (kbd "C-c o") 'ga/play-with-mpv))
#+END_SRC

* pdf
  
#+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config (pdf-tools-install))
#+END_SRC
* irc
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :ensure t
    :custom
    (erc-nick "blisszs"))
#+END_SRC
