Welcome to my emacs config

* visuals
** Doom-modeline
 #+BEGIN_SRC emacs-lisp
 (use-package doom-modeline
 :ensure t
 :config 
 (doom-modeline-mode 1)
 (use-package minions :ensure t)
 (setq doom-modeline-minor-modes (featurep 'minions)))
 #+END_SRC
** colortheme
 #+BEGIN_SRC emacs-lisp
 (use-package base16-theme
 :ensure t
 :config (load-theme 'base16-default-dark t))
 #+END_SRC
** org-bullets
 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
 :ensure t
 :hook (org-mode . org-bullets-mode))
 ;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
 #+END_SRC
* emacs
** interface clutter
 #+BEGIN_SRC emacs-lisp
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
 #+END_SRC
** line number
   #+BEGIN_SRC emacs-lisp
   (global-display-line-numbers-mode 1)
   #+END_SRC
** font
 #+BEGIN_SRC emacs-lisp
 (set-face-attribute 'default nil :font "terminus-12")
 #+END_SRC
** line wrapping 
   #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
   #+END_SRC
** highlight parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** backup directory and backup settings
   #+BEGIN_SRC emacs-lisp
   (setq
    backup-by-copying t      ; don't clobber symlinks
    backup-directory-alist
     '(("." . "~/.backups/"))    ; don't litter my fs tree
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups
   #+END_SRC
* evil mode
  #+BEGIN_SRC emacs-lisp
;  (use-package evil
;  :ensure t
;  :config (evil-mode 1))
  #+END_SRC
* git integration
** magit  
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
  #+END_SRC
* LaTeX
** auctex
 #+BEGIN_SRC emacs-lisp
 (use-package auctex
 :ensure t
 :defer t)
 #+END_SRC
* minibuffers tools
** ivy 
 #+BEGIN_SRC emacs-lisp
 (use-package ivy
 :ensure t
 :config (ivy-mode 1))
 #+END_SRC
** counsel
 #+BEGIN_SRC emacs-lisp
 (use-package counsel
 :ensure t
 :config (counsel-mode 1))
 #+END_SRC
** swiper
* completion
** company
   #+BEGIN_SRC emacs-lisp
   (use-package company
   :ensure t
   :config 
   (setq company-idle-delay 0)
   (setq company-minimum-prefix-length 3)
   :hook 
   ((c++-mode c-mode objc-mode) . company-mode))
   #+END_SRC
* flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :hook
  ((c++-mode) . flycheck-mode))
  #+END_SRC
* YASnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :ensure t
  :config (use-package yasnippet-snippets :ensure t)
  :hook
  ((c++-mode) . yas-minor-mode))
  #+END_SRC
* programming
** c++
*** company-irony
    #+BEGIN_SRC emacs-lisp
    (use-package company-irony
    :ensure t
    :requires (company)
    :config 
    (add-to-list 'company-backends 'company-irony))
    #+END_SRC
*** irony
   #+BEGIN_SRC emacs-lisp
   (use-package irony
   :ensure t
   :hook
   (((c++-mode c-mode objc-mode) . irony-mode)
   (irony-mode . irony-cdb-autosetup-compile-options)))
   #+END_SRC
*** flycheck-irony
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck-irony
    :ensure t
    :hook
    (flycheck-mode . flycheck-irony-setup))
    #+END_SRC
* smartparens
  #+BEGIN_SRC emacs-lisp
  (use-package smartparens
  :ensure t
  :hook
  ((c++-mode org-mode) . smartparens-mode))
  #+END_SRC
* agressive inndent
  #+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
  :ensure t
  :hook
  ((c++-mode) . aggressive-indent-mode))
  #+END_SRC
* hydra
  #+BEGIN_SRC emacs-lisp
  (use-package hydra
  :ensure t
  :config
  (hydra-mode 1))
  #+END_SRC
* to be added
** multiple cursors 
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
