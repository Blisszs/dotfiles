Welcome to my emacs config

* visuals
** Doom-modeline
 #+BEGIN_SRC emacs-lisp
 (use-package doom-modeline
 :ensure t
 :config 
 (doom-modeline-mode 1))
 #+END_SRC
** colortheme
 #+BEGIN_SRC emacs-lisp
 (use-package darktooth-theme
 :ensure t
 :config (load-theme 'darktooth t))
 #+END_SRC
** org-bullets
 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
 :ensure t
 :hook (org-mode . org-bullets-mode))
 ;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
 #+END_SRC
** prettify symbols
   #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode t)
   #+END_SRC
* emacs
** interface clutter
 #+BEGIN_SRC emacs-lisp
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
 #+END_SRC
** modeline configuration
   #+BEGIN_SRC emacs-lisp
   (display-time-mode 1)
   #+END_SRC
** line number
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   (add-hook 'text-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** font
 #+BEGIN_SRC emacs-lisp
 (set-face-attribute 'default nil :font "terminus-12")
 #+END_SRC
** line wrapping 
   #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
   #+END_SRC
** highlight parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** disable start page
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
** backup directory and backup settings
   #+BEGIN_SRC emacs-lisp
   (setq
    backup-by-copying t      ; don't clobber symlinks
    backup-directory-alist
     '(("." . "~/.backups/"))    ; don't litter my fs tree
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups
   #+END_SRC
** tabs
   #+begin_src emacs-lisp
   (setq-default indent-tabs-mode t)
   (setq-default tab-width 8) 
   (defvaralias 'c-basic-offset 'tab-width)
   #+end_src
* IDE stuff
** completion
*** company
    #+BEGIN_SRC emacs-lisp
    (use-package company
    :ensure t
    :config 
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :hook 
    ((c++-mode c-mode objc-mode) . company-mode))
    #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
   :ensure t
   :hook
   ((c++-mode c-mode rust-mode) . flycheck-mode))
   #+END_SRC
** flycheck-popup
   #+begin_src emacs-lisp
   (use-package flycheck-popup-tip
   :ensure t
   :hook
   ((c++-mode c-mode rust-mode) . flycheck-popup-tip-mode))
   #+end_src
** smartparens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :hook
   ((c++-mode c-mode objc-mode emacs-lisp-mode org-mode scheme-mode) . smartparens-mode))
   #+END_SRC
* programming
** c/c++
*** company-irony
 #+BEGIN_SRC emacs-lisp
 (use-package company-irony
 :ensure t
 :requires (company)
 :config 
 (add-to-list 'company-backends 'company-irony))
#+END_SRC
*** eldoc-irony
    #+begin_src emacs-lisp
    (use-package irony-eldoc
    :ensure t
    :hook
    (irony-mode . irony-eldoc))
    #+end_src
*** irony
   #+BEGIN_SRC emacs-lisp
   (use-package irony
   :ensure t
   :config (setq irony-libclang-additional-flags
     (append '("-I" "/run/current-system/profile/include/c++/" irony-libclang-additional-flags)))
   :hook
   (((c++-mode c-mode objc-mode) . irony-mode)
   (irony-mode . irony-cdb-autosetup-compile-options)))
   #+END_SRC
*** flycheck-irony
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck-irony
    :ensure t
    :hook
    (flycheck-mode . flycheck-irony-setup))
    #+END_SRC
** rust
*** rust-mode
    #+begin_src emacs-lisp 
    (use-package rust-mode
    :ensure t)
    #+end_src
*** flycheck-rust
    #+begin_src emacs-lisp 
    (use-package flycheck-rust
    :ensure t
    :hook (flycheck-rust-setup . rust-mode))
    #+end_src
** emacs-lisp
** scheme
   #+begin_src emacs-lisp
   (add-hook 'scheme-mode-hook #'smartparens-mode)
   #+end_src
* YASnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :ensure t
  :config 
  (use-package yasnippet-snippets :ensure t)
  :hook
  ((c++-mode emacs-lisp-mode org-mode) . yas-minor-mode))
  #+END_SRC
* minibuffers tools
** ivy 
 #+BEGIN_SRC emacs-lisp
 (use-package ivy
 :ensure t
 :config 
 (ivy-mode 1))
 #+END_SRC
** counsel
 #+BEGIN_SRC emacs-lisp
 (use-package counsel
 :ensure t
 :config 
 (counsel-mode 1))
 #+END_SRC
** swiper
   #+begin_src emacs-lisp
   (use-package swiper
   :ensure t
   :bind ("C-s" . 'swiper))
   #+end_src
* git integration
** magit  
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
  #+END_SRC
* Discord Rich Presence
  #+begin_src emacs-lisp
  (use-package eldoc
  :ensure t
  :config (eldoc-mode 1))
  #+end_src
* LaTeX


** auctex
 #+BEGIN_SRC emacs-lisp
 (use-package auctex
 :ensure t
 :defer t)
 #+END_SRC
* to be added
** ace window
   #+BEGIN_SRC emacs-lisp
  
   #+END_SRC
** eldoc + c/c++
   #+begin_src emacs-lisp
   
   #+end_src
** avy
   #+begin_src emacs-lisp

   #+end_src
