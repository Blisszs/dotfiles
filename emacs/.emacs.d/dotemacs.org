Welcome to my emacs config

* visuals
** colortheme
 #+BEGIN_SRC emacs-lisp
 (use-package darktooth-theme
 :ensure t
 :config (load-theme 'darktooth t))
 (set-background-color "#222222")
 #+END_SRC
** modeline
   #+BEGIN_SRC emacs-lisp
   (use-package telephone-line
   :ensure t
   :config (telephone-line-mode 1))
   #+END_SRC
** org-bullets
 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
 :ensure t
 :hook (org-mode . org-bullets-mode))
 ;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
 #+END_SRC
** prettify symbols
   #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode t)
   #+END_SRC
** interface clutter
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fringe-mode 0)
#+END_SRC
** line number
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   (add-hook 'text-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** font
 #+BEGIN_SRC emacs-lisp
 (set-face-attribute 'default nil :font "hack-10")
 #+END_SRC
** line wrapping 
   #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
   #+END_SRC
** highlight parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** disable start page
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
* file management
** backup directory and backup settings
   #+BEGIN_SRC emacs-lisp
   (setq
    backup-by-copying t      ; don't clobber symlinks
    backup-directory-alist
     '(("." . "~/.backups/"))    ; don't litter my fs tree
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups
   #+END_SRC
* navigation
** evil
*** evil-mode
   #+begin_src emacs-lisp
   (use-package evil
   :ensure t
   :init
   (setq evil-want-keybinding nil)
   :config 
   (evil-mode 1))
   #+end_src
*** evil-collecion
    #+begin_src emacs-lisp
    (use-package evil-collection
    :after evil
    :ensure t
    :config (evil-collection-init))
    #+end_src
*** evil-leader
    #+begin_src emacs-lisp
    (use-package evil-leader
    :ensure t
    :init (global-evil-leader-mode)
    :config 
    (evil-leader/set-leader "<SPC>") 
    (evil-leader/set-key
    "p s" 'persp-switch
    "f" 'counsel-fzf
    "x f" 'counsel-find-file
    "x x" 'counsel-M-x
    "x k" 'kill-buffer
    "x g" 'avy-goto-char-2
    "g"   'magit
    "x s" 'swiper))
    #+end_src
*** evil-avy
    #+begin_src emacs-lisp
    (use-package evil-avy
    :ensure t)
    #+end_src
*** org-mode tab fix
    #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook                                                                      
          (lambda ()                                                                          
        (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))) 
    #+END_SRC
** avy
   #+begin_src emacs-lisp
   (use-package avy
   :ensure t
   :config )
   #+end_src
** workspaces
   #+BEGIN_SRC emacs-lisp
   (use-package perspective
   :ensure t
   :config (persp-mode 1))
   #+END_SRC
* IDE stuff
** completion
*** company
    #+BEGIN_SRC emacs-lisp
    (use-package company
    :ensure t
    :config 
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    :hook 
    ((c++-mode c-mode objc-mode) . company-mode))
    #+END_SRC
** error checking
*** flycheck
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck
    :ensure t
    :hook
    ((c++-mode c-mode rust-mode) . flycheck-mode))
    #+END_SRC
*** flycheck-popup
    #+begin_src emacs-lisp
    (use-package flycheck-popup-tip
    :ensure t
    :hook
    (flycheck-mode . flycheck-popup-tip-mode))
    #+end_src
** smartparens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :hook
   ((c++-mode html-mode css-mode c-mode objc-mode emacs-lisp-mode org-mode scheme-mode) . smartparens-mode))
   #+END_SRC
** lisp REPL
   #+begin_src emacs-lisp
   (use-package geiser
   :ensure t)
   #+end_src
** snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
   :ensure t
   :config (yas-global-mode 1))
   #+END_SRC
* programming
** c/c++
*** irony
   #+BEGIN_SRC emacs-lisp
   (use-package irony
   :ensure t
   :hook
   (((c++-mode c-mode objc-mode) . irony-mode)
   (irony-mode . irony-cdb-autosetup-compile-options)))
   #+END_SRC
*** company-irony
 #+BEGIN_SRC emacs-lisp
 (use-package company-irony
 :ensure t
 :requires (company)
 :config 
 (add-to-list 'company-backends 'company-irony))
#+END_SRC
*** company-irony-c-headers
    #+BEGIN_SRC emacs-lisp
    (use-package company-irony-c-headers
    :ensure t
    :config 
    (eval-after-load 'company '(add-to-list 'company-backends '(company-irony-c-headers company-irony))))
    #+END_SRC
*** flycheck-irony
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck-irony
    :ensure t
    :hook
    (flycheck-mode . flycheck-irony-setup))
    #+END_SRC
*** eldoc-irony
    #+begin_src emacs-lisp
    (use-package irony-eldoc
    :ensure t
    :hook
    (irony-mode . irony-eldoc))
    #+end_src
** rust
*** rust-mode
    #+begin_src emacs-lisp 
    (use-package rust-mode
    :ensure t)
    #+end_src
*** flycheck-rust
    #+begin_src emacs-lisp 
    (use-package flycheck-rust
    :ensure t
    :hook (flycheck-rust-setup . rust-mode))
    #+end_src
** haskell
*** haskell-mode
   #+BEGIN_SRC emacs-lisp
   (use-package haskell-mode
   :ensure t)
   #+END_SRC
* minibuffers tools
** ivy 
 #+BEGIN_SRC emacs-lisp
 (use-package ivy
 :ensure t
 :config 
 (ivy-mode 1))
 #+END_SRC
** counsel
 #+BEGIN_SRC emacs-lisp
 (use-package counsel
 :ensure t
 :config 
 (counsel-mode 1))
 #+END_SRC
** swiper
   #+begin_src emacs-lisp
   (use-package swiper
   :ensure t
   :bind ("C-s" . 'swiper))
   #+end_src
* git integration
** magit 
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
  #+END_SRC
** magit-evil
   #+begin_src emacs-lisp
   (use-package evil-magit
   :ensure t)
   #+end_src
