Welcome to my emacs config

* visuals
** colortheme
 #+BEGIN_SRC emacs-lisp
 (use-package darktooth-theme
 :ensure t
 :config (load-theme 'darktooth t))
 (set-background-color "#222222")
 #+END_SRC
** org-bullets
 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
 :ensure t
 :hook (org-mode . org-bullets-mode))
 ;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
 #+END_SRC
** prettify symbols
   #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode t)
   #+END_SRC
** interface clutter
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fringe-mode 0)
#+END_SRC
** line number
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   (add-hook 'text-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** font
 #+BEGIN_SRC emacs-lisp
 (set-face-attribute 'default nil :font "hack-10")
 #+END_SRC
** line wrapping 
   #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
   #+END_SRC
** highlight parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
   :ensure t
   :init (which-key-mode)
   :config 
   (which-key-setup-side-window-bottom)
   (setq which-key-idle-delay 0))
   #+END_SRC
** disable start page
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
* file management
** backup directory and backup settings
   #+BEGIN_SRC emacs-lisp
   (setq
    backup-by-copying t      ; don't clobber symlinks
    backup-directory-alist
     '(("." . "~/.backups/"))    ; don't litter my fs tree
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups
   #+END_SRC
* navigation
** evil
*** evil-mode
   #+begin_src emacs-lisp
   (use-package evil
   :ensure t
   :init
   (setq evil-want-keybinding nil)
   :config 
   (evil-mode 1))
   #+end_src
*** evil-collecion
    #+begin_src emacs-lisp
    (use-package evil-collection
    :after evil
    :ensure t
    :config (evil-collection-init))
    #+end_src
*** evil-leader
    #+begin_src emacs-lisp
    (use-package evil-leader
    :ensure t
    :init (global-evil-leader-mode)
    :config 
    (evil-leader/set-leader "<SPC>") 
    (evil-leader/set-key
    "p s" 'persp-switch
    "<SPC>" 'counsel-M-x
    "f" 'counsel-fzf
    "x f" 'counsel-find-file
    "x x" 'counsel-M-x
    "x k" 'kill-buffer
    "x g" 'avy-goto-char-2
    "g"   'magit
    "x s" 'swiper))
    #+end_src
*** evil-avy
    #+begin_src emacs-lisp
    (use-package evil-avy
    :ensure t)
    #+end_src
*** evil-escape
   #+BEGIN_SRC emacs-lisp
   (use-package evil-escape
   :ensure t
   :config (evil-escape-mode 1))
   #+END_SRC 
*** org-mode tab fix
    #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook                                                                      
          (lambda ()                                                                          
        (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))) 
    #+END_SRC
** avy
   #+begin_src emacs-lisp
   (use-package avy
   :ensure t
   :config )
   #+end_src
** buffer
   #+BEGIN_SRC emacs-lisp
   (defadvice split-window (after move-point-to-new-window activate)
   "Moves the point to the newly created window after splitting."
   (other-window 1))
   #+END_SRC
* IDE stuff
** completion
*** company
    #+BEGIN_SRC emacs-lisp
    (use-package company
    :commands global-company-mode
    :bind (:map company-active-map
              ("TAB" . company-complete-common-or-cycle)
              ("M-TAB" . company-complete-selection)
              ("<tab>" . company-complete-common-or-cycle)
              ("<S-Tab>" . company-select-previous)
              ("<backtab>" . company-select-previous)
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
    :hook (after-init . global-company-mode)
    :ensure t
    :config 
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    (setq company-require-match 'never)
    :hook 
    ((c++-mode c-mode objc-mode) . company-mode))
    #+END_SRC
** error checking
*** flycheck
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck
    :ensure t
    :hook
    ((c++-mode c-mode rust-mode) . flycheck-mode))
    #+END_SRC
*** flycheck-popup
    #+begin_src emacs-lisp
    (use-package flycheck-popup-tip
    :ensure t
    :hook
    (flycheck-mode . flycheck-popup-tip-mode))
    #+end_src
** smartparens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :config (smartparens-global-mode))
   #+END_SRC
** lisp REPL
   #+begin_src emacs-lisp
   (use-package geiser
   :ensure t)
   #+end_src
** snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
   :ensure t
   :config (yas-global-mode 1))
   #+END_SRC
** eglot / language server
   #+BEGIN_SRC emacs-lisp
   (use-package eglot
   :ensure t)
   #+END_SRC
** lsp
   
** multi-term
   #+BEGIN_SRC emacs-lisp
   (use-package multi-term
   :ensure t)
   #+END_SRC
* programming
** c/c++
*** clangd
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure)
    #+END_SRC
** rust
*** rust-mode
    #+begin_src emacs-lisp 
    (use-package rust-mode
    :ensure t)
    #+end_src
** haskell
*** haskell-mode
   #+BEGIN_SRC emacs-lisp
   (use-package haskell-mode
   :ensure t)
   #+END_SRC
* minibuffers tools
** ivy 
 #+BEGIN_SRC emacs-lisp
 (use-package ivy
 :ensure t
 :config 
 (ivy-mode 1))
 #+END_SRC
** counsel
 #+BEGIN_SRC emacs-lisp
 (use-package counsel
 :ensure t
 :config 
 (counsel-mode 1))
 #+END_SRC
** swiper
   #+begin_src emacs-lisp
   (use-package swiper
   :ensure t
   :bind ("C-s" . 'swiper))
   #+end_src
* git integration
** magit 
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
  #+END_SRC
** magit-evil
   #+begin_src emacs-lisp
   (use-package evil-magit
   :ensure t)
   #+end_src
* latex
** auctex
   #+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  ;; to use pdfview with auctex
  (TeX-view-program-selection '((output-pdf "pdf-tools"))
                              TeX-source-correlate-start-server t)
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  :hook
  (LaTeX-mode . (lambda ()
                  (turn-on-reftex)
                  (setq reftex-plug-into-AUCTeX t)
                  (reftex-isearch-minor-mode)
                  (setq TeX-PDF-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-source-correlate-start-server t)))
  :config
  (when (version< emacs-version "26")
    (add-hook LaTeX-mode-hook #'display-line-numbers-mode)))
   #+END_SRC
* pdf
  #+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
  :ensure t
  :config (pdf-tools-install))
  #+END_SRC
